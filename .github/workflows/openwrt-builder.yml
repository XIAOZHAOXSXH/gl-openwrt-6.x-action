#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-builder.yml
# Description: Build OpenWrt using GitHub Actions for King-Of-Knights/openwrt-6.x
#
# 修改后用于编译 https://github.com/King-Of-Knights/openwrt-6.x 项目，并集成 luci-theme-design 主题
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: OpenWrt Builder

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/King-Of-Knights/openwrt-6.x.git
  REPO_BRANCH: main
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 1
        ref: ${{ env.REPO_BRANCH }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends \
          software-properties-common \    # 添加此行以启用 add-apt-repository
          ack \
          antlr3 \
          asciidoc \
          autoconf \
          automake \
          autopoint \
          binutils \
          bison \
          build-essential \
          bzip2 \
          ccache \
          cmake \
          cpio \
          curl \
          device-tree-compiler \
          fastjar \
          flex \
          gawk \
          gettext \
          gcc-multilib \
          g++-multilib \
          git \
          gperf \
          haveged \
          help2man \
          intltool \
          libc6-dev-i386 \
          libelf-dev \
          libglib2.0-dev \
          libgmp3-dev \
          libltdl-dev \
          libmpc-dev \
          libmpfr-dev \
          libncurses5-dev \
          libncursesw5-dev \
          libreadline-dev \
          libssl-dev \
          libtool \
          lrzsz \
          mkisofs \
          msmtp \
          nano \
          ninja-build \
          p7zip \
          p7zip-full \
          patch \
          pkgconf \
          python3 \
          python3-pip \
          python3-setuptools \        # 修正后的包名
          libpython3-dev \
          libmesa-dev \              # 添加 libmesa-dev
          libwayland-dev \           # 添加 libwayland-dev
          libgraphene-1.0-dev \      # 修正后的包名
          qemu-utils \
          rsync \
          scons \
          squashfs-tools \
          subversion \
          swig \
          texinfo \
          uglifyjs \
          upx-ucl \
          unzip \
          vim \
          wget \
          xmlto \
          xxd \
          zlib1g-dev
        # 启用 universe 仓库
        sudo add-apt-repository universe
        sudo apt-get update -qq
        sudo apt-get autoremove --purge -y
        sudo apt-get clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone --depth 1 --single-branch -b $REPO_BRANCH $REPO_URL openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        if [ -e $FEEDS_CONF ]; then
          mv $FEEDS_CONF openwrt/feeds.conf.default
        fi
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update and install feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        if [ -e files ]; then
          mv files openwrt/files
        fi
        if [ -e $CONFIG_FILE ]; then
          mv $CONFIG_FILE openwrt/.config
        fi
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download packages
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        THREADS=$(nproc)
        echo "Using $THREADS threads for compilation."
        make -j$THREADS || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        if [ -s DEVICE_NAME ]; then
          echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        fi
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: always()
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@v3
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && success()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$(pwd)" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@v3
      if: steps.organize.outputs.status == 'success' && success()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && success()
      run: |
        RELEASE_TAG=$(date +"%Y.%m.%d-%H%M")
        echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
        touch release.txt
        # 如果需要添加 GoFile 链接，请确保相关步骤和变量已定义
        if [ "${UPLOAD_GOFILE}" = "true" ] && [ "${{ steps.gofile.outputs.url }}" ]; then
          echo "🔗 [GoFile](${{ steps.gofile.outputs.url }})" >> release.txt
        fi
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && success()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && success()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
